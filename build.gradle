apply plugin: 'scala'
apply plugin: 'idea'
apply plugin: 'eclipse'

repositories {
    mavenCentral()
/*    ivy {
        name = 'ivyRepo'
        artifactPattern "file:///Users/dglauser/.ivy2/local/[organisation]/[module]/[revision]/ivys/[artifact].[ext]"
    } */	
    
    flatDir name: 'localAkkaActor', dirs: '/Users/dglauser/Projects/scala/akka/akka-actor/target'
    flatDir name: 'localAkkaRemote', dirs: '/Users/dglauser/Projects/scala/akka/akka-remote/target'
    flatDir name: 'localAkka', dirs: '/Users/dglauser/Projects/scala/akka/target'
    
    mavenRepo urls: [ "http://akka.io/repository/", "http://download.java.net/maven/2/",
                      "http://repository.jboss.org/nexus/content/groups/public-jboss/",
                      "http://nexus.scala-tools.org/content/repositories/public/",
                      "http://guiceyfruit.googlecode.com/svn/repo/releases/" ]
}

dependencies {
    //def scalaVersion = '2.9.0.RC1'
    def scalaVersion = '2.9.0-1'
    //def akkaVersion = '1.1-M1'
    def akkaVersion = '1.1.2'
    
    // Libraries needed to run the scala tools
    scalaTools 'org.scala-lang:scala-compiler:' + scalaVersion
    scalaTools 'org.scala-lang:scala-library:' + scalaVersion
    
    // Akka
    compile 'se.scalablesolutions.akka:akka-actor:' + akkaVersion
    compile 'se.scalablesolutions.akka:akka-remote:' + akkaVersion
    compile 'se.scalablesolutions.akka:akka-amqp:' + akkaVersion

    testCompile 'se.scalablesolutions.akka:akka:' + akkaVersion
    testCompile 'se.scalablesolutions.akka:akka-remote:' + akkaVersion
    testCompile 'se.scalablesolutions.akka:akka-amqp:' + akkaVersion
    
    // Libraries needed for scala api
    compile 'org.scala-lang:scala-library:' + scalaVersion
    testCompile 'org.scala-lang:scala-library:' +scalaVersion
    
    //logging.captureStandardOutput LogLevel.DEBUG
    testCompile 'org.scalatest:scalatest_2.9.0:1.6-SNAPSHOT'
}

clean.doLast {
}

task test(overwrite: true, dependsOn: testClasses) << {
  println("Make sure to have something like this in your environment:")
  println('export GRADLE_OPTS="-Dorg.gradle.daemon=true -Dakka.config=/Users/dglauser/Projects/scala/remote-actor-prototype/src/main/resources/proto-akka.conf"')
  println("")
  
  ant.taskdef(name: 'scalatest',
    classname: 'org.scalatest.tools.ScalaTestAntTask',
    classpath: sourceSets.test.runtimeClasspath.asPath
  )
  
  ant.scalatest(
    runpath: sourceSets.test.classesDir,
    haltonfailure: 'true',
    fork: 'false') {
      //jvmarg(value: "-Dakka.config=./src/main/resources/proto-akka.conf") 
      reporter(type: 'stdout')
    }
}

task deleteDeps(type:Delete) {
  println('deleting deps')
  delete 'deps', '*.jar'  
}

task deps(type:Copy) {
  println('Writing depenencies to the deps dir') 
  into 'deps' 
  from configurations.runtime 
}

// Currently broken for Scala, works for Java
task run(type:JavaExec) { 
  classpath = configurations.runtime
  println("My classpath is: ${classpath}") 
  main='actorproto.Client' 
}
